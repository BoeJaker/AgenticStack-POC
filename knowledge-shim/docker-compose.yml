version: "3.8"

services:
  # Neo4j Database
  neo4j:
    image: neo4j:5.15
    environment:
      - NEO4J_AUTH=neo4j/your_password_here
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_memory_heap_initial__size=1G
      - NEO4J_server_memory_heap_max__size=2G
      - NEO4J_server_memory_pagecache_size=1G
      - NEO4J_db_tx__log_rotation_retention__policy=1 days
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - kg_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p your_password_here 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for job queuing
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kg_network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Ollama Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - kg_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Knowledge Graph Ollama Shim
  kg-ollama-shim:
    build:
      context: ./shim
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_URL=http://ollama:11434
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=your_password_here
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=kg-ollama-shim
      - VERSION=1.0.0
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - kg_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Heavy Processing Workers (multiple instances)
  heavy-worker-1:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - OLLAMA_URL=http://ollama:11434
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=your_password_here
      - REDIS_URL=redis://redis:6379
      - WORKER_NAME=heavy-worker-1
      - PROCESSING_MODEL=llama2
      - MAX_RETRIES=3
      - CRAWL_DELAY=1.0
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - kg_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  heavy-worker-2:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - OLLAMA_URL=http://ollama:11434
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=your_password_here
      - REDIS_URL=redis://redis:6379
      - WORKER_NAME=heavy-worker-2
      - PROCESSING_MODEL=llama2
      - MAX_RETRIES=3
      - CRAWL_DELAY=1.0
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - kg_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Tier 2 Deep Processing Worker (optional, for complex analysis)
  tier2-worker:
    build:
      context: ./tier2_worker
      dockerfile: Dockerfile
    environment:
      - OLLAMA_URL=http://ollama:11434
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=your_password_here
      - REDIS_URL=redis://redis:6379
      - WORKER_NAME=tier2-worker
      - DEEP_MODEL=llama2  # Could use a larger model for deeper analysis
      - HF_MODEL_PATH=sentence-transformers/all-MiniLM-L6-v2  # For embeddings
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - kg_network
    volumes:
      - ./logs:/app/logs
      - hf_cache:/root/.cache/huggingface
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Monitoring and Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - kg_network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - kg_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Knowledge Graph Visualization API
  kg-viz-api:
    build:
      context: ./viz_api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=your_password_here
      - REDIS_URL=redis://redis:6379
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - kg_network
    restart: unless-stopped

networks:
  kg_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  hf_cache:
    driver: local